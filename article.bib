@article{gross_co-founder_nodate,
	title = {Co-{Founder} \& {Chief} {Scientist} {Hedera} {Hashgraph}},
	language = {en},
	author = {Gross, Bryan and Thibeau, Donald},
	file = {Gross and Thibeau - Co-Founder & Chief Scientist Hedera Hashgraph.pdf:/Users/spolgar/Zotero/storage/L2H6W9ZI/Gross and Thibeau - Co-Founder & Chief Scientist Hedera Hashgraph.pdf:application/pdf},
}

@article{lashkari_comprehensive_2021,
	title = {A {Comprehensive} {Review} of {Blockchain} {Consensus} {Mechanisms}},
	volume = {9},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2021.3065880},
	abstract = {Since the advent of distributed ledger technologies, they have provided diverse opportunities in a wide range of application domains. This article brings a comprehensive review of the fundamentals of distributed ledger and its variants. Analyzing 185 publications, ranging from academic journals to industry websites, it provides a comparative analysis of 130 consensus algorithms using a novel architectural classification. The distribution of the reviewed algorithms is analyzed in terms of the proposed classification and different application domains, along with the applicability of each class among the top 10 platforms in the most prominent blockchain application domains. Additional conclusions are drawn from the evolution of consensus mechanisms, and the analysis concludes envisaging future prospects for consensus as an important part of distributed ledger technology.},
	journal = {IEEE Access},
	author = {Lashkari, Bahareh and Musilek, Petr},
	year = {2021},
	note = {Conference Name: IEEE Access},
	keywords = {Banking, Blockchain, Consensus algorithm, consensus mechanisms, cryptocurrency, Distributed databases, Distributed ledger, distributed ledger technology, Scalability},
	pages = {43620--43652},
	file = {IEEE Xplore Abstract Record:/Users/spolgar/Zotero/storage/V5DWNQAI/stamp.html:text/html;IEEE Xplore Full Text PDF:/Users/spolgar/Zotero/storage/AS89MR9C/Lashkari and Musilek - 2021 - A Comprehensive Review of Blockchain Consensus Mec.pdf:application/pdf},
}

@article{baird_swirlds_nodate,
	title = {{THE} {SWIRLDS} {HASHGRAPH} {CONSENSUS} {ALGORITHM}: {FAIR}, {FAST}, {BYZANTINE} {FAULT} {TOLERANCE}},
	abstract = {A new system, the Swirlds hashgraph consensus algorithm, is proposed for replicated state machines with guaranteed Byzantine fault tolerance. It achieves fairness, in the sense that it is diﬃcult for an attacker to manipulate which of two transactions will be chosen to be ﬁrst in the consensus order. It has complete asynchrony, no leaders, no round robin, no proof-ofwork, eventual consensus with probability one, and high speed in the absence of faults. It is based on a gossip protocol, in which the participants don’t just gossip about transactions. They gossip about gossip. They jointly build a hashgraph reﬂecting all of the gossip events. This allows Byzantine agreement to be achieved through virtual voting. Alice does not send Bob a vote over the Internet. Instead, Bob calculates what vote Alice would have sent, based on his knowledge of what Alice knows. This yields fair Byzantine agreement on a total order for all transactions, with very little communication overhead beyond the transactions themselves.},
	language = {en},
	author = {Baird, Leemon},
	file = {Baird - THE SWIRLDS HASHGRAPH CONSENSUS ALGORITHM FAIR, F.pdf:/Users/spolgar/Zotero/storage/8KCLRZEY/Baird - THE SWIRLDS HASHGRAPH CONSENSUS ALGORITHM FAIR, F.pdf:application/pdf},
}

@article{james_experimental_2019,
	title = {An experimental framework for investigating hashgraph algorithm transaction speed},
	doi = {10.1145/3362744.3363342},
	abstract = {Power grids around the world have experienced a growing number of malicious cyber attacks. This paper provides an overview of recent use of the Hyperledger Fabric distributed operating system to prototype use of a permissioned blockchain consensus algorithm to trust shared state estimation and control data and another effort to alter local sensor data to destroy the integrity of the shared data. The paper also provides justification for an experiment to prototype use of Babble, a peer-to-peer network plugin using the hashgraph consensus algorithm, to share the state estimation and control data through transactions recorded in a hashgraph. A key claim of the hashgraph documentation, which is unsubstantiated without a proper academic analysis, is that the algorithm is asynchronous Byzantine fault tolerance (ABFT). Also, while the Hyperledger Fabric implementation supports thousands of transactions per second, the hashgraph algorithm documentation claims orders of magnitude more. Our experiment seeks to measure the hashgraph transaction speed and determine its suitability for improving the resilience of wide area control of the smart grid. The previous resilience research of the Anomaly Detection of Cyber Physical Systems (ADCPS) team includes research into inadvertent cyber and physical failures as well as malicious attacks. We conclude with some speculations concerning the potential impact of fast, fair, and secure sharing of data across a network of blockchains potentially interfaced using hashgraph distributed ledger technology (DLT).},
	journal = {BlockSys@SenSys},
	author = {James, John and Hawthorne, Daniel and Duncan, Kate J. and St. Leger, Aaron and Sagisi, Joseph and Collins, Michael},
	month = nov,
	year = {2019},
	doi = {10.1145/3362744.3363342},
	note = {MAG ID: 2987673314
S2ID: a53e63aa31e645cfe30d45a0a4f911fb083b16aa},
	pages = {15--21},
}

@article{b_anupama_analysis_2022,
	title = {Analysis of the {Consensus} {Protocols} used in {Blockchain} {Networks} – {An} overview},
	doi = {10.1109/icdsis55133.2022.9915929},
	abstract = {Distributed ledger technologies have opened up a wide variety of possibilities in various application sectors like Blockchain, Hashgraph, Holochain, Directed Acyclic Graph (DAG) and Radix. The consensus mechanism eliminates a centralized controller from altering the “content” or how it should be recorded on a blockchain. The consensus protocol is the defining technology behind the performance of blockchain, among other important components. Many people believe that data stored in a Blockchain is and will always be safe because of its decentralization and encryption. Consensus layer aids in measuring performance of the blockchain. Consensus procedures are essential for the long-term stability of a Blockchain system. Blockchain technology is built on consensus. Consensus protocols are invented to enhance the efficiency of Blockchain while also satisfying the specific needs of different application domains. Consensus protocol increases the efficiency of the blockchain by increasing the throughput of the system. PoW, PoS, DPoS, PoET, PoA and PBFT are the protocols reviewed in this paper. In this paper, we analyze and compare the strengths and weaknesses of consensus protocols. We have considered each consensus protocol’s performance metrics like throughput, scalability, decentralization accessibility and applications for blockchain networks. This survey will offer blockchain developers and researchers a thorough perspective of current consensus protocols and will aid in the development of future protocols.},
	journal = {2022 IEEE International Conference on Data Science and Information System (ICDSIS)},
	author = {{B. Anupama} and {N. Sunitha}},
	year = {2022},
	doi = {10.1109/icdsis55133.2022.9915929},
	note = {S2ID: b37a26601da130115ddf101574b7d1e72b57253f},
}

@article{lamport_byzantine_2019,
	title = {The {Byzantine} generals problem},
	doi = {10.1145/357172.357176},
	abstract = {Reliable computer systems must handle malfunctioning components that give conflicting information to different parts of the system. This situation can be expressed abstractly in terms of a group of generals of the Byzantine army camped with their troops around an enemy city. Communicating only by messenger, the generals must agree upon a common battle plan. However, one or more of them may be traitors who will try to confuse the others. The problem is to find an algorithm to ensure that the loyal generals will reach agreement. It is shown that, using only oral messages, this problem is solvable if and only if more than two-thirds of the generals are loyal; so a single traitor can confound two loyal generals. With unforgeable written messages, the problem is solvable for any number of generals and possible traitors. Applications of the solutions to reliable computer systems are then discussed.},
	journal = {ACM Transactions on Programming Languages and Systems},
	author = {Lamport, Leslie and Shostak, Robert E. and Pease, Marshall C.},
	month = oct,
	year = {2019},
	doi = {10.1145/357172.357176},
	note = {MAG ID: 2120510885},
	pages = {203--226},
}

@article{pan_plume_2021,
	title = {Plume: {Fast} {Finality} {Blockchain} without {Single} {Failure} {Point}},
	doi = {10.1145/3456126.3456128},
	abstract = {Bitcoin’s slow finality is an important factor preventing it from being widely used in real life. And other public single-chain blockchains have the same problem. In this paper, we propose a practical new protocol called Plume to achieve consensus with fast finality by utilizing a (slow) traditional blockchain. Plume combines the DAG structure and traditional blockchain to increase throughput and speed up confirmation. DAG structure is proposed to increase throughput, but how to construct a secure consensus protocol based on DAG is pretty hard. In Plume, we use the traditional blockchain to generate a randomness which is used to generate fast blocks in DAG. And the order of fast blocks in DAG is dependent on a global clock and a hash function. Same as bitcoin, Plume is a probabilistic protocol. However, due to DAG structure, the creation rate of blocks in Plume can be higher without reducing security. Thus the confirmation time of blocks can be accelerated. This paper also analyzes the probability of confirmation in different conditions and also proves that Plume is secure no matter the randomness from traditional single chain is unbiased or not. At last, this paper simulates performance with 1000 nodes using NS-3. The throughput can be improved to 400 Tps in the case that block size is 100K bytes and time interval of fast block is 1 second. Also the confirmation time can be reduced to within 2 minutes in the case that block size is 10K bytes and time interval is 1 second.},
	journal = {Asia Service Sciences and Software Engineering Conference},
	author = {Pan, Yeda and {Bingfeng Pi} and Pi, Bingfeng and {Jun Sun} and Sun, Jun},
	month = feb,
	year = {2021},
	doi = {10.1145/3456126.3456128},
	note = {MAG ID: 3173784841
S2ID: f2fa95610f2e185a066ab33017c1a46a746b9135},
	pages = {18--27},
}

@article{vitalik_buterin_incentives_2019,
	title = {Incentives in {Ethereum}'s {Hybrid} {Casper} {Protocol}},
	doi = {10.1002/nem.2098},
	abstract = {We present an overview of hybrid Casper the Friendly Finality Gadget (FFG): a Proof-of-Stake checkpointing protocol overlaid onto Ethereum's Proof-of-Work blockchain. We describe its core functionalities and reward scheme, and explore its properties. Our findings indicate that Casper's implemented incentives mechanism ensures liveness, while providing safety guarantees that improve over standard Proof-of-Work protocols. Based on a minimal-impact implementation of the protocol as a smart contract on the blockchain, we discuss additional issues related to parametrisation, funding, throughput and network overhead and detect potential limitations.},
	journal = {International Journal of Network Management},
	author = {{Vitalik Buterin} and Buterin, Vitalik and Reijsbergen, Daniel and Leonardos, Stefanos and Piliouras, Georgios},
	month = mar,
	year = {2019},
	doi = {10.1002/nem.2098},
	note = {ARXIV\_ID: 1903.04205
MAG ID: 3006691149
S2ID: 5bc655ca356e549831b64cad8754428b4160865e},
}

@article{buterin_casper_2017,
	title = {Casper the {Friendly} {Finality} {Gadget}},
	abstract = {We introduce Casper, a proof of stake-based finality system which overlays an existing proof of work blockchain. Casper is a partial consensus mechanism combining proof of stake algorithm research and Byzantine fault tolerant consensus theory. We introduce our system, prove some desirable features, and show defenses against long range revisions and catastrophic crashes. The Casper overlay provides almost any proof of work chain with additional protections against block reversions.},
	journal = {arXiv: Cryptography and Security},
	author = {Buterin, Vitalik and Griffith, Virgil},
	month = oct,
	year = {2017},
	note = {ARXIV\_ID: 1710.09437
MAG ID: 2766209351
S2ID: fdbebd67c8a9671efabf4e53d6267789cd91d96c},
}

@article{o_moindrot_proof_2017,
	title = {Proof of {Stake} {Made} {Simple} with {Casper}},
	abstract = {We study the recent paper Buterin and Griffith [2017] introducing Casper, a proof of stake consensus algorithm for blockchains. Proof of stake has several advantages compared to proof of work, and represents what blockchains will look like in the future. A set of validators cast public votes to decide on which blocks to finalize. They follow some rules which guarantee safety and liveness, and Byzantine Fault Tolerance of up to 1/3 of validators. Our goal is to explain as gently as possible the different aspects of Casper and Proof of Stake. To this end, we implement a simple version of Casper in python, available on github 1. Using this simulation, we show how the consensus algorithm behaves when varying parameters like latency or when partitioning the network.},
	author = {{O. Moindrot}},
	year = {2017},
	note = {S2ID: 02feb6217d3a722773d9a971b2bbc80aa374ed95},
}
